name: ðŸš€ Deploy to Production

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      deployment_reason:
        description: "Reason for deployment"
        required: false
        default: "Manual production deployment"
  # Optional: Uncomment the next line to allow deploying when a new GitHub Release is published
  # release:
  #   types: [published]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies and Build
        run: |
          npm ci
          npm run build
          # npm test # Uncomment this if you have tests

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Production Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/addypin:latest
            ghcr.io/${{ github.repository_owner }}/addypin:${{ github.sha }}

  deploy-to-production:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Only runs when manually triggered
    steps:
      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "ðŸš€ Deploying to Production..."
            
            # Set deployment directory based on environment
            DEPLOY_DIR="/opt/addypin"
            cd $DEPLOY_DIR
            
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository_owner }}/addypin:latest
            
            # Deploy using compose
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d
            
            # Verify deployment
            echo "Waiting for health check..."
            sleep 15
            PORT="3000"
            curl -f http://localhost:$PORT/api/health || exit 1
            echo "âœ… Deployment successful!"
